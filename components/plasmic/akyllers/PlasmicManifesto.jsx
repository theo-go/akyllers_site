// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: DinjO4l3Ok
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto.module.css"; // plasmic-import: DinjO4l3Ok/css
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: DZ_ZJwIq1b/icon
import InstagramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom2Svg"; // plasmic-import: DNMeweYbp-/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: SCWRDWiaJn/icon

export const PlasmicManifesto__VariantProps = new Array();

export const PlasmicManifesto__ArgProps = new Array();

export const defaultManifesto__Args = {};

function PlasmicManifesto__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___9YBRl
                )}
                component={Link}
                href={"/"}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__yNgMs)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/akyllers/images/logopng.png",
                    fullWidth: 1560,
                    fullHeight: 303,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___6Xw6L)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/ghostWhitepng.png",
                        fullWidth: 32,
                        fullHeight: 32,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/close.svg"
                }
              />
            }
            itemsGap={12}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qbN8B
                  )}
                  component={Link}
                  href={"/manifesto-5"}
                  platform={"nextjs"}
                >
                  {"Gallery"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__s5LC7
                  )}
                  component={Link}
                  href={"/manifesto-3"}
                  platform={"nextjs"}
                >
                  {"Roadmap"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lxVcx
                  )}
                  component={Link}
                  href={"/manifesto"}
                  platform={"nextjs"}
                >
                  {"manifesto"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vgXzj
                  )}
                  component={Link}
                  href={"/-2"}
                  platform={"nextjs"}
                >
                  {"arcade"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tlyIa
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <DiscordSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg___4YbdT)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__f0Zhb
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <InstagramSvgrepoCom2SvgIcon
                    className={classNames(projectcss.all, sty.svg__rQn5O)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___8891
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <TwitterSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__cpK9S)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mdy6L)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/pacmanWhitepng.png",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/menu.svg"
                }
              />
            }
            responsiveBreakpoint={768}
          />

          <div
            data-plasmic-name={"textSection"}
            data-plasmic-override={overrides.textSection}
            className={classNames(projectcss.all, sty.textSection)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"MANIFESTO"}
            </h1>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Enter some text"}
            </div>
          </div>

          <TrueFooter
            data-plasmic-name={"trueFooter"}
            data-plasmic-override={overrides.trueFooter}
            className={classNames("__wab_instance", sty.trueFooter)}
            darkMode={true}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "textSection", "h1", "text", "trueFooter"],
  navigationBar: ["navigationBar"],
  textSection: ["textSection", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto__ArgProps,
      internalVariantPropNames: PlasmicManifesto__VariantProps
    });

    return PlasmicManifesto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto";
  } else {
    func.displayName = `PlasmicManifesto.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto = Object.assign(
  // Top-level PlasmicManifesto renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    textSection: makeNodeComponent("textSection"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto
    internalVariantProps: PlasmicManifesto__VariantProps,
    internalArgProps: PlasmicManifesto__ArgProps
  }
);

export default PlasmicManifesto;
/* prettier-ignore-end */
