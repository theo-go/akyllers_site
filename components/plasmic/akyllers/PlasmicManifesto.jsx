// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: DinjO4l3Ok
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavbarCustom from "../../NavbarCustom"; // plasmic-import: 5sPSsjDnyE/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto.module.css"; // plasmic-import: DinjO4l3Ok/css

export const PlasmicManifesto__VariantProps = new Array();

export const PlasmicManifesto__ArgProps = new Array();

export const defaultManifesto__Args = {};

function PlasmicManifesto__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto__Args, props.args);
  const $props = args;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Manifesto"}</title>
        <meta key="og:title" property="og:title" content={"Manifesto"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavbarCustom
            data-plasmic-name={"navbarCustom"}
            data-plasmic-override={overrides.navbarCustom}
            className={classNames("__wab_instance", sty.navbarCustom)}
          />

          <div
            data-plasmic-name={"textSection"}
            data-plasmic-override={overrides.textSection}
            className={classNames(projectcss.all, sty.textSection)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"MANIFESTO"}
            </h1>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Enter some text"}
            </div>
          </div>

          <TrueFooter
            data-plasmic-name={"trueFooter"}
            data-plasmic-override={overrides.trueFooter}
            className={classNames("__wab_instance", sty.trueFooter)}
            darkMode={true}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "navbarCustom", "textSection", "h1", "text", "trueFooter"],
  navbarCustom: ["navbarCustom"],
  textSection: ["textSection", "h1", "text"],
  h1: ["h1"],
  text: ["text"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto__ArgProps,
      internalVariantPropNames: PlasmicManifesto__VariantProps
    });

    return PlasmicManifesto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto";
  } else {
    func.displayName = `PlasmicManifesto.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto = Object.assign(
  // Top-level PlasmicManifesto renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarCustom: makeNodeComponent("navbarCustom"),
    textSection: makeNodeComponent("textSection"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto
    internalVariantProps: PlasmicManifesto__VariantProps,
    internalArgProps: PlasmicManifesto__ArgProps
  }
);

export default PlasmicManifesto;
/* prettier-ignore-end */
