// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: oP4880RYxJw
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LightFooterBox from "../../LightFooterBox"; // plasmic-import: U1TWkuZvfI/component
import DarkFooterBox from "../../DarkFooterBox"; // plasmic-import: QPWIEA9PWn/component
import DarkFooterBox2 from "../../DarkFooterBox2"; // plasmic-import: EaCaTvYvI9/component
import LightFooterBox2 from "../../LightFooterBox2"; // plasmic-import: T2PRct6rsu/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicBoxesFooter.module.css"; // plasmic-import: oP4880RYxJw/css

export const PlasmicBoxesFooter__VariantProps = new Array();

export const PlasmicBoxesFooter__ArgProps = new Array();

export const defaultBoxesFooter__Args = {};

function PlasmicBoxesFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBoxesFooter__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"COMMUNITY"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__cmTv5)}
      >
        <LightFooterBox
          data-plasmic-name={"lightFooterBox"}
          data-plasmic-override={overrides.lightFooterBox}
          className={classNames("__wab_instance", sty.lightFooterBox)}
          url={"https://discord.com/invite/fGbCdPkDwU"}
        />

        <DarkFooterBox
          data-plasmic-name={"darkFooterBox"}
          data-plasmic-override={overrides.darkFooterBox}
          className={classNames("__wab_instance", sty.darkFooterBox)}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0Owuq)}
      >
        <DarkFooterBox2
          data-plasmic-name={"darkFooterBox2"}
          data-plasmic-override={overrides.darkFooterBox2}
          className={classNames("__wab_instance", sty.darkFooterBox2)}
        />

        <LightFooterBox2
          data-plasmic-name={"lightFooterBox2"}
          data-plasmic-override={overrides.lightFooterBox2}
          className={classNames("__wab_instance", sty.lightFooterBox2)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "lightFooterBox",
    "darkFooterBox",
    "darkFooterBox2",
    "lightFooterBox2"
  ],

  text: ["text"],
  lightFooterBox: ["lightFooterBox"],
  darkFooterBox: ["darkFooterBox"],
  darkFooterBox2: ["darkFooterBox2"],
  lightFooterBox2: ["lightFooterBox2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBoxesFooter__ArgProps,
      internalVariantPropNames: PlasmicBoxesFooter__VariantProps
    });

    return PlasmicBoxesFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBoxesFooter";
  } else {
    func.displayName = `PlasmicBoxesFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicBoxesFooter = Object.assign(
  // Top-level PlasmicBoxesFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    lightFooterBox: makeNodeComponent("lightFooterBox"),
    darkFooterBox: makeNodeComponent("darkFooterBox"),
    darkFooterBox2: makeNodeComponent("darkFooterBox2"),
    lightFooterBox2: makeNodeComponent("lightFooterBox2"),
    // Metadata about props expected for PlasmicBoxesFooter
    internalVariantProps: PlasmicBoxesFooter__VariantProps,
    internalArgProps: PlasmicBoxesFooter__ArgProps
  }
);

export default PlasmicBoxesFooter;
/* prettier-ignore-end */
