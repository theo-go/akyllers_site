// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: u3bZHsWi8B
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicGalleryItemBox.module.css"; // plasmic-import: u3bZHsWi8B/css

export const PlasmicGalleryItemBox__VariantProps = new Array("blue", "purple");

export const PlasmicGalleryItemBox__ArgProps = new Array(
  "image",
  "name",
  "number"
);

function PlasmicGalleryItemBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: "/plasmic/akyllers/images/humanMenEyesFacialMouth1Png.png",
            fullWidth: 2048,
            fullHeight: 2048,
            aspectRatio: undefined
          }
        },

        props.args
      ),

    [props.args]
  );

  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__uccG7, {
          [sty.freeBoxblue__uccG7Yv58Q]: hasVariant(variants, "blue", "blue"),
          [sty.freeBoxpurple__uccG7Ch8ZR]: hasVariant(
            variants,
            "purple",
            "purple"
          )
        })}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgblue]: hasVariant(variants, "blue", "blue"),
            [sty.imgpurple]: hasVariant(variants, "purple", "purple")
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={args.image}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__iwcRy)}>
        <div className={classNames(projectcss.all, sty.freeBox___4ZJZj)}>
          {p.renderPlasmicSlot({
            defaultContents: "Name",
            value: args.name,
            className: classNames(sty.slotTargetName)
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__wimpw)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"No. "}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__mdNfV)}>
            {p.renderPlasmicSlot({
              defaultContents: "1111",
              value: args.number,
              className: classNames(sty.slotTargetNumber)
            })}
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "text"],
  img: ["img"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGalleryItemBox__ArgProps,
          internalVariantPropNames: PlasmicGalleryItemBox__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicGalleryItemBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGalleryItemBox";
  } else {
    func.displayName = `PlasmicGalleryItemBox.${nodeName}`;
  }
  return func;
}

export const PlasmicGalleryItemBox = Object.assign(
  // Top-level PlasmicGalleryItemBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicGalleryItemBox
    internalVariantProps: PlasmicGalleryItemBox__VariantProps,
    internalArgProps: PlasmicGalleryItemBox__ArgProps
  }
);

export default PlasmicGalleryItemBox;
/* prettier-ignore-end */
