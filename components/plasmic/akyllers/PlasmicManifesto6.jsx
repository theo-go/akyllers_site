// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: OETkP4aQ7kj
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarCustom from "../../NavbarCustom"; // plasmic-import: 5sPSsjDnyE/component
import MmBoxQuote from "../../MmBoxQuote"; // plasmic-import: -LEP2YxQV0/component
import NewArt from "../../NewArt"; // plasmic-import: PrC51OjMk0/component
import ReadButton from "../../ReadButton"; // plasmic-import: daG_UtRVH0/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto6.module.css"; // plasmic-import: OETkP4aQ7kj/css

export const PlasmicManifesto6__VariantProps = new Array();

export const PlasmicManifesto6__ArgProps = new Array();

export const defaultManifesto6__Args = {};

function PlasmicManifesto6__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto6__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Forum"}</title>
        <meta key="og:title" property="og:title" content={"Forum"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <NavbarCustom
              data-plasmic-name={"navbarCustom"}
              data-plasmic-override={overrides.navbarCustom}
              className={classNames("__wab_instance", sty.navbarCustom)}
            />
          </div>

          {true ? (
            <div
              data-plasmic-name={"restOfSite"}
              data-plasmic-override={overrides.restOfSite}
              className={classNames(projectcss.all, sty.restOfSite)}
            >
              {true ? (
                <div
                  data-plasmic-name={"quote"}
                  data-plasmic-override={overrides.quote}
                  className={classNames(projectcss.all, sty.quote)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jbCp1
                        )}
                      >
                        {
                          "Our intent is to be unclassifiable in a cluttered landscape."
                        }
                      </div>
                    </div>
                  ) : null}
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"banners"}
                  data-plasmic-override={overrides.banners}
                  className={classNames(projectcss.all, sty.banners)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w278X
                    )}
                  >
                    {"COMMUNITY"}
                  </div>

                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__jWcku
                    )}
                  >
                    {"REPRESENT YOUR MURI"}
                  </h1>

                  <MmBoxQuote
                    className={classNames(
                      "__wab_instance",
                      sty.mmBoxQuote__cyCrP
                    )}
                  >
                    {"asdf asdf asd as fdfd sdafasfd adsf"}
                  </MmBoxQuote>

                  <MmBoxQuote
                    className={classNames(
                      "__wab_instance",
                      sty.mmBoxQuote___71Bvt
                    )}
                    color1={true}
                  />

                  <MmBoxQuote
                    c2={true}
                    className={classNames(
                      "__wab_instance",
                      sty.mmBoxQuote__hkcup
                    )}
                  />

                  <MmBoxQuote
                    c3={true}
                    className={classNames(
                      "__wab_instance",
                      sty.mmBoxQuote__iTpHm
                    )}
                  />
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"newArtDiv"}
                  data-plasmic-override={overrides.newArtDiv}
                  className={classNames(projectcss.all, sty.newArtDiv)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__qCaNh
                    )}
                  >
                    {"LARISSA'S ART"}
                  </h1>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"artStack"}
                    data-plasmic-override={overrides.artStack}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.artStack)}
                  >
                    <NewArt
                      data-plasmic-name={"newArt"}
                      data-plasmic-override={overrides.newArt}
                      className={classNames("__wab_instance", sty.newArt)}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__suJhn
                          )}
                        >
                          {"Description"}
                        </div>
                      }
                    />
                  </p.Stack>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"newArtDiv2"}
                  data-plasmic-override={overrides.newArtDiv2}
                  className={classNames(projectcss.all, sty.newArtDiv2)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__z6ZI1
                    )}
                  >
                    {"THE ANIME STORY"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u2Qx2
                    )}
                  >
                    {"asdfasdfasdfasdfasdf"}
                  </div>

                  <ReadButton
                    data-plasmic-name={"readButton"}
                    data-plasmic-override={overrides.readButton}
                    className={classNames("__wab_instance", sty.readButton)}
                  />
                </div>
              ) : null}

              <TrueFooter
                data-plasmic-name={"trueFooter"}
                data-plasmic-override={overrides.trueFooter}
                className={classNames("__wab_instance", sty.trueFooter)}
              />
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "navbarCustom",
    "restOfSite",
    "quote",
    "freeBox",
    "banners",
    "newArtDiv",
    "artStack",
    "newArt",
    "newArtDiv2",
    "readButton",
    "trueFooter"
  ],

  hero: ["hero", "navbarCustom"],
  navbarCustom: ["navbarCustom"],
  restOfSite: [
    "restOfSite",
    "quote",
    "freeBox",
    "banners",
    "newArtDiv",
    "artStack",
    "newArt",
    "newArtDiv2",
    "readButton",
    "trueFooter"
  ],

  quote: ["quote", "freeBox"],
  freeBox: ["freeBox"],
  banners: ["banners"],
  newArtDiv: ["newArtDiv", "artStack", "newArt"],
  artStack: ["artStack", "newArt"],
  newArt: ["newArt"],
  newArtDiv2: ["newArtDiv2", "readButton"],
  readButton: ["readButton"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto6__ArgProps,
      internalVariantPropNames: PlasmicManifesto6__VariantProps
    });

    return PlasmicManifesto6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto6";
  } else {
    func.displayName = `PlasmicManifesto6.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto6 = Object.assign(
  // Top-level PlasmicManifesto6 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    navbarCustom: makeNodeComponent("navbarCustom"),
    restOfSite: makeNodeComponent("restOfSite"),
    quote: makeNodeComponent("quote"),
    freeBox: makeNodeComponent("freeBox"),
    banners: makeNodeComponent("banners"),
    newArtDiv: makeNodeComponent("newArtDiv"),
    artStack: makeNodeComponent("artStack"),
    newArt: makeNodeComponent("newArt"),
    newArtDiv2: makeNodeComponent("newArtDiv2"),
    readButton: makeNodeComponent("readButton"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto6
    internalVariantProps: PlasmicManifesto6__VariantProps,
    internalArgProps: PlasmicManifesto6__ArgProps
  }
);

export default PlasmicManifesto6;
/* prettier-ignore-end */
