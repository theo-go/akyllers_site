// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: OETkP4aQ7kj
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import YouTube from "@plasmicpkgs/react-youtube"; // plasmic-import: CHO21V9uYw/codeComponent
import MmBoxQuote from "../../MmBoxQuote"; // plasmic-import: -LEP2YxQV0/component
import NewArt from "../../NewArt"; // plasmic-import: PrC51OjMk0/component
import ReadButton from "../../ReadButton"; // plasmic-import: daG_UtRVH0/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto6.module.css"; // plasmic-import: OETkP4aQ7kj/css
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: DZ_ZJwIq1b/icon
import InstagramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom2Svg"; // plasmic-import: DNMeweYbp-/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: SCWRDWiaJn/icon

export const PlasmicManifesto6__VariantProps = new Array();

export const PlasmicManifesto6__ArgProps = new Array();

export const defaultManifesto6__Args = {};

function PlasmicManifesto6__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto6__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__pxZ0R
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__edi1D)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/akyllers/images/logopng.png",
                      fullWidth: 1560,
                      fullHeight: 303,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__si6Le)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/akyllers/images/ghostWhitepng.png",
                          fullWidth: 32,
                          fullHeight: 32,
                          aspectRatio: undefined
                        }
                      : "https://static1.plasmic.app/close.svg"
                  }
                />
              }
              itemsGap={12}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___6Buz3
                    )}
                    component={Link}
                    href={"/manifesto-5"}
                    platform={"nextjs"}
                  >
                    {"Gallery"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__s5LC7
                    )}
                    component={Link}
                    href={"/manifesto-3"}
                    platform={"nextjs"}
                  >
                    {"Roadmap"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__lxVcx
                    )}
                    component={Link}
                    href={"/manifesto"}
                    platform={"nextjs"}
                  >
                    {"manifesto"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__vgXzj
                    )}
                    component={Link}
                    href={"/-2"}
                    platform={"nextjs"}
                  >
                    {"arcade"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tlyIa
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <DiscordSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___4YbdT)}
                      role={"img"}
                    />
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__f0Zhb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <InstagramSvgrepoCom2SvgIcon
                      className={classNames(projectcss.all, sty.svg__rQn5O)}
                      role={"img"}
                    />
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___8891
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <TwitterSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__cpK9S)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qziQq)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "auto"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/akyllers/images/pacmanWhitepng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }
                      : "https://static1.plasmic.app/menu.svg"
                  }
                />
              }
              responsiveBreakpoint={768}
            />
          </div>

          <div
            data-plasmic-name={"restOfSite"}
            data-plasmic-override={overrides.restOfSite}
            className={classNames(projectcss.all, sty.restOfSite)}
          >
            <div
              data-plasmic-name={"quote"}
              data-plasmic-override={overrides.quote}
              className={classNames(projectcss.all, sty.quote)}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jbCp1
                  )}
                >
                  {
                    "Our intent is to be unclassifiable in a cluttered landscape."
                  }
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"songDiv"}
              data-plasmic-override={overrides.songDiv}
              className={classNames(projectcss.all, sty.songDiv)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__tP1U6)}>
                  <YouTube
                    data-plasmic-name={"youTube"}
                    data-plasmic-override={overrides.youTube}
                    className={classNames("__wab_instance", sty.youTube)}
                    controls={true}
                    disablekb={false}
                    fs={false}
                    modestbranding={true}
                    rel={false}
                    videoId={"R6MeLqRQzYw"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__m2N5W)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__dumnX
                    )}
                  >
                    {"DEFINITIONS"}
                  </h1>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rTJpY
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"banners"}
              data-plasmic-override={overrides.banners}
              className={classNames(projectcss.all, sty.banners)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w278X
                )}
              >
                {"COMMUNITY"}
              </div>

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__jWcku
                )}
              >
                {"REPRESENT YOUR MURI"}
              </h1>

              <MmBoxQuote
                className={classNames("__wab_instance", sty.mmBoxQuote__cyCrP)}
              />

              <MmBoxQuote
                className={classNames("__wab_instance", sty.mmBoxQuote___71Bvt)}
                color1={true}
              />

              <MmBoxQuote
                c2={true}
                className={classNames("__wab_instance", sty.mmBoxQuote__hkcup)}
              />

              <MmBoxQuote
                c3={true}
                className={classNames("__wab_instance", sty.mmBoxQuote__iTpHm)}
              />
            </div>

            <div
              data-plasmic-name={"newArtDiv"}
              data-plasmic-override={overrides.newArtDiv}
              className={classNames(projectcss.all, sty.newArtDiv)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__qCaNh
                )}
              >
                {"LARISSA'S ART"}
              </h1>

              <p.Stack
                as={"div"}
                data-plasmic-name={"artStack"}
                data-plasmic-override={overrides.artStack}
                hasGap={true}
                className={classNames(projectcss.all, sty.artStack)}
              >
                <NewArt
                  data-plasmic-name={"newArt"}
                  data-plasmic-override={overrides.newArt}
                  className={classNames("__wab_instance", sty.newArt)}
                />
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"newArtDiv2"}
              data-plasmic-override={overrides.newArtDiv2}
              className={classNames(projectcss.all, sty.newArtDiv2)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__z6ZI1
                )}
              >
                {"THE ANIME STORY"}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u2Qx2
                )}
              >
                {"asdfasdfasdfasdfasdf"}
              </div>

              <ReadButton
                data-plasmic-name={"readButton"}
                data-plasmic-override={overrides.readButton}
                className={classNames("__wab_instance", sty.readButton)}
              />
            </div>

            <TrueFooter
              data-plasmic-name={"trueFooter"}
              data-plasmic-override={overrides.trueFooter}
              className={classNames("__wab_instance", sty.trueFooter)}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "navigationBar",
    "restOfSite",
    "quote",
    "freeBox",
    "songDiv",
    "columns",
    "youTube",
    "banners",
    "newArtDiv",
    "artStack",
    "newArt",
    "newArtDiv2",
    "readButton",
    "trueFooter"
  ],

  hero: ["hero", "navigationBar"],
  navigationBar: ["navigationBar"],
  restOfSite: [
    "restOfSite",
    "quote",
    "freeBox",
    "songDiv",
    "columns",
    "youTube",
    "banners",
    "newArtDiv",
    "artStack",
    "newArt",
    "newArtDiv2",
    "readButton",
    "trueFooter"
  ],

  quote: ["quote", "freeBox"],
  freeBox: ["freeBox"],
  songDiv: ["songDiv", "columns", "youTube"],
  columns: ["columns", "youTube"],
  youTube: ["youTube"],
  banners: ["banners"],
  newArtDiv: ["newArtDiv", "artStack", "newArt"],
  artStack: ["artStack", "newArt"],
  newArt: ["newArt"],
  newArtDiv2: ["newArtDiv2", "readButton"],
  readButton: ["readButton"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto6__ArgProps,
      internalVariantPropNames: PlasmicManifesto6__VariantProps
    });

    return PlasmicManifesto6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto6";
  } else {
    func.displayName = `PlasmicManifesto6.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto6 = Object.assign(
  // Top-level PlasmicManifesto6 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    navigationBar: makeNodeComponent("navigationBar"),
    restOfSite: makeNodeComponent("restOfSite"),
    quote: makeNodeComponent("quote"),
    freeBox: makeNodeComponent("freeBox"),
    songDiv: makeNodeComponent("songDiv"),
    columns: makeNodeComponent("columns"),
    youTube: makeNodeComponent("youTube"),
    banners: makeNodeComponent("banners"),
    newArtDiv: makeNodeComponent("newArtDiv"),
    artStack: makeNodeComponent("artStack"),
    newArt: makeNodeComponent("newArt"),
    newArtDiv2: makeNodeComponent("newArtDiv2"),
    readButton: makeNodeComponent("readButton"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto6
    internalVariantProps: PlasmicManifesto6__VariantProps,
    internalArgProps: PlasmicManifesto6__ArgProps
  }
);

export default PlasmicManifesto6;
/* prettier-ignore-end */
