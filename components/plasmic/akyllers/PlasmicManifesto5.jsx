// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: lEk4k8FFv6H
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { Select } from "antd"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import GalleryItemBox from "../../GalleryItemBox"; // plasmic-import: u3bZHsWi8B/component
import AttributesBox from "../../AttributesBox"; // plasmic-import: btXf6zq--J/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto5.module.css"; // plasmic-import: lEk4k8FFv6H/css
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: DZ_ZJwIq1b/icon
import InstagramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom2Svg"; // plasmic-import: DNMeweYbp-/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: SCWRDWiaJn/icon

export const PlasmicManifesto5__VariantProps = new Array();

export const PlasmicManifesto5__ArgProps = new Array();

export const defaultManifesto5__Args = {};

function PlasmicManifesto5__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto5__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__dArDj
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__fylli)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/akyllers/images/logopng.png",
                    fullWidth: 1560,
                    fullHeight: 303,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__whhsp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/ghostWhitepng.png",
                        fullWidth: 32,
                        fullHeight: 32,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/close.svg"
                }
              />
            }
            itemsGap={12}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bcf5X
                  )}
                  component={Link}
                  href={"/manifesto-5"}
                  platform={"nextjs"}
                >
                  {"Gallery"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__s5LC7
                  )}
                  component={Link}
                  href={"/manifesto-3"}
                  platform={"nextjs"}
                >
                  {"Roadmap"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lxVcx
                  )}
                  component={Link}
                  href={"/manifesto"}
                  platform={"nextjs"}
                >
                  {"manifesto"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vgXzj
                  )}
                  component={Link}
                  href={"/-2"}
                  platform={"nextjs"}
                >
                  {"arcade"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tlyIa
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <DiscordSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg___4YbdT)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__f0Zhb
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <InstagramSvgrepoCom2SvgIcon
                    className={classNames(projectcss.all, sty.svg__rQn5O)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___8891
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <TwitterSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__cpK9S)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__et9Hq)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/pacmanWhitepng.png",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/menu.svg"
                }
              />
            }
            responsiveBreakpoint={768}
          />

          <div
            data-plasmic-name={"textSection"}
            data-plasmic-override={overrides.textSection}
            className={classNames(projectcss.all, sty.textSection)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"filters"}
                data-plasmic-override={overrides.filters}
                hasGap={true}
                className={classNames(projectcss.all, sty.filters)}
              >
                <Select
                  allowClear={true}
                  bordered={true}
                  className={classNames(
                    "__wab_instance",
                    sty.antdSelect__rag6N
                  )}
                  disabled={false}
                  loading={false}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Z44V
                      )}
                    >
                      {"Select"}
                    </div>
                  }
                >
                  <Option
                    className={classNames(
                      "__wab_instance",
                      sty.antdOption___6Z5Fa
                    )}
                    value={"Option"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h5RUx
                      )}
                    >
                      {"Option"}
                    </div>
                  </Option>
                </Select>

                <Select
                  allowClear={true}
                  bordered={true}
                  className={classNames(
                    "__wab_instance",
                    sty.antdSelect__sx5Wh
                  )}
                  disabled={false}
                  loading={false}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Rv5E
                      )}
                    >
                      {"Select"}
                    </div>
                  }
                >
                  <Option
                    className={classNames(
                      "__wab_instance",
                      sty.antdOption___8LQ6M
                    )}
                    value={"Option"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mHjpG
                      )}
                    >
                      {"Option"}
                    </div>
                  </Option>
                </Select>

                <Select
                  allowClear={true}
                  bordered={true}
                  className={classNames(
                    "__wab_instance",
                    sty.antdSelect__g8RNn
                  )}
                  disabled={false}
                  loading={false}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qfBk
                      )}
                    >
                      {"Select"}
                    </div>
                  }
                >
                  <Option
                    className={classNames(
                      "__wab_instance",
                      sty.antdOption__dpFL
                    )}
                    value={"Option"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v1Y6K
                      )}
                    >
                      {"Option"}
                    </div>
                  </Option>
                </Select>
              </p.Stack>
            ) : null}

            <div
              data-plasmic-name={"leftRight"}
              data-plasmic-override={overrides.leftRight}
              className={classNames(projectcss.all, sty.leftRight)}
            >
              <div className={classNames(projectcss.all, sty.column__mcwbM)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"galleryItems"}
                  data-plasmic-override={overrides.galleryItems}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.galleryItems)}
                >
                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__fuVxP
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox___9DTgU
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__cCmYs
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox___79VG6
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__uWnG
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__bwp4C
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__cg6Op
                    )}
                  />

                  <GalleryItemBox
                    className={classNames(
                      "__wab_instance",
                      sty.galleryItemBox__aKeLh
                    )}
                  />
                </p.Stack>
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.column___6Y2O)}>
                  <div
                    data-plasmic-name={"rightSide"}
                    data-plasmic-override={overrides.rightSide}
                    className={classNames(projectcss.all, sty.rightSide)}
                  >
                    <div
                      data-plasmic-name={"imgDiv"}
                      data-plasmic-override={overrides.imgDiv}
                      className={classNames(projectcss.all, sty.imgDiv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__rGn9)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/akyllers/images/humanMenEyesFacialMouth1Png.png",
                          fullWidth: 2048,
                          fullHeight: 2048,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      data-plasmic-name={"nameDiv"}
                      data-plasmic-override={overrides.nameDiv}
                      className={classNames(projectcss.all, sty.nameDiv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wl51A
                        )}
                      >
                        {"Name"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uXqy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y5GuC
                          )}
                        >
                          {"#"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yKfyy
                          )}
                        >
                          {" "}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rO5HC
                          )}
                        >
                          {"1111"}
                        </div>
                      </div>
                    </div>

                    {true ? (
                      <div
                        data-plasmic-name={"attributesDiv"}
                        data-plasmic-override={overrides.attributesDiv}
                        className={classNames(
                          projectcss.all,
                          sty.attributesDiv
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__nmSOy
                              )}
                            >
                              <AttributesBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.attributesBox__e30Hb
                                )}
                              />
                            </div>
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__u62Kh
                            )}
                          >
                            <AttributesBox
                              className={classNames(
                                "__wab_instance",
                                sty.attributesBox__gwgF
                              )}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__nUjhm
                            )}
                          >
                            <AttributesBox
                              className={classNames(
                                "__wab_instance",
                                sty.attributesBox__qapmb
                              )}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__qyx3D
                            )}
                          >
                            <AttributesBox
                              className={classNames(
                                "__wab_instance",
                                sty.attributesBox__tnWmr
                              )}
                            />
                          </div>
                        </p.Stack>
                      </div>
                    ) : null}

                    <div
                      data-plasmic-name={"viewOn"}
                      data-plasmic-override={overrides.viewOn}
                      className={classNames(projectcss.all, sty.viewOn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ivf3R
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1GnEl
                          )}
                        >
                          {"View on:"}
                        </div>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kIlxe
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rhzYa
                          )}
                        >
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__yMzqd
                            )}
                            role={"img"}
                          />

                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__fBteg
                            )}
                            role={"img"}
                          />
                        </p.Stack>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </div>

          <TrueFooter
            className={classNames("__wab_instance", sty.trueFooter__tx3Lu)}
            darkMode={true}
          />

          <TrueFooter
            className={classNames("__wab_instance", sty.trueFooter__zExsc)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "textSection",
    "filters",
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  navigationBar: ["navigationBar"],
  textSection: [
    "textSection",
    "filters",
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  filters: ["filters"],
  leftRight: [
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  galleryItems: ["galleryItems"],
  rightSide: [
    "rightSide",
    "imgDiv",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  imgDiv: ["imgDiv"],
  nameDiv: ["nameDiv"],
  attributesDiv: ["attributesDiv", "columns"],
  columns: ["columns"],
  viewOn: ["viewOn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto5__ArgProps,
      internalVariantPropNames: PlasmicManifesto5__VariantProps
    });

    return PlasmicManifesto5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto5";
  } else {
    func.displayName = `PlasmicManifesto5.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto5 = Object.assign(
  // Top-level PlasmicManifesto5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    textSection: makeNodeComponent("textSection"),
    filters: makeNodeComponent("filters"),
    leftRight: makeNodeComponent("leftRight"),
    galleryItems: makeNodeComponent("galleryItems"),
    rightSide: makeNodeComponent("rightSide"),
    imgDiv: makeNodeComponent("imgDiv"),
    nameDiv: makeNodeComponent("nameDiv"),
    attributesDiv: makeNodeComponent("attributesDiv"),
    columns: makeNodeComponent("columns"),
    viewOn: makeNodeComponent("viewOn"),
    // Metadata about props expected for PlasmicManifesto5
    internalVariantProps: PlasmicManifesto5__VariantProps,
    internalArgProps: PlasmicManifesto5__ArgProps
  }
);

export default PlasmicManifesto5;
/* prettier-ignore-end */
