// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: lEk4k8FFv6H
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarCustom from "../../NavbarCustom"; // plasmic-import: 5sPSsjDnyE/component
import BoxesFooter from "../../BoxesFooter"; // plasmic-import: oP4880RYxJw/component
import { Select } from "antd"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import GalleryItemBox from "../../GalleryItemBox"; // plasmic-import: u3bZHsWi8B/component
import AttributesBox from "../../AttributesBox"; // plasmic-import: btXf6zq--J/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto5.module.css"; // plasmic-import: lEk4k8FFv6H/css

export const PlasmicManifesto5__VariantProps = new Array();

export const PlasmicManifesto5__ArgProps = new Array();

export const defaultManifesto5__Args = {};

function PlasmicManifesto5__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto5__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Gallery"}</title>
        <meta key="og:title" property="og:title" content={"Gallery"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavbarCustom
            data-plasmic-name={"navbarCustom"}
            data-plasmic-override={overrides.navbarCustom}
            className={classNames("__wab_instance", sty.navbarCustom)}
            darkLetters={true}
          />

          <div className={classNames(projectcss.all, sty.freeBox__bNqht)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xTdFx
              )}
            >
              {"Coming soon..."}
            </div>

            <BoxesFooter
              data-plasmic-name={"boxesFooter"}
              data-plasmic-override={overrides.boxesFooter}
              className={classNames("__wab_instance", sty.boxesFooter)}
            />
          </div>

          {true ? (
            <div
              data-plasmic-name={"textSection"}
              data-plasmic-override={overrides.textSection}
              className={classNames(projectcss.all, sty.textSection)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"filters"}
                  data-plasmic-override={overrides.filters}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.filters)}
                >
                  <Select
                    allowClear={true}
                    bordered={true}
                    className={classNames(
                      "__wab_instance",
                      sty.antdSelect__rag6N
                    )}
                    disabled={false}
                    loading={false}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Z44V
                        )}
                      >
                        {"Select"}
                      </div>
                    }
                  >
                    <Option
                      className={classNames(
                        "__wab_instance",
                        sty.antdOption___6Z5Fa
                      )}
                      value={"Option"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h5RUx
                        )}
                      >
                        {"Option"}
                      </div>
                    </Option>
                  </Select>

                  <Select
                    allowClear={true}
                    bordered={true}
                    className={classNames(
                      "__wab_instance",
                      sty.antdSelect__sx5Wh
                    )}
                    disabled={false}
                    loading={false}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3Rv5E
                        )}
                      >
                        {"Select"}
                      </div>
                    }
                  >
                    <Option
                      className={classNames(
                        "__wab_instance",
                        sty.antdOption___8LQ6M
                      )}
                      value={"Option"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mHjpG
                        )}
                      >
                        {"Option"}
                      </div>
                    </Option>
                  </Select>

                  <Select
                    allowClear={true}
                    bordered={true}
                    className={classNames(
                      "__wab_instance",
                      sty.antdSelect__g8RNn
                    )}
                    disabled={false}
                    loading={false}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qfBk
                        )}
                      >
                        {"Select"}
                      </div>
                    }
                  >
                    <Option
                      className={classNames(
                        "__wab_instance",
                        sty.antdOption__dpFL
                      )}
                      value={"Option"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v1Y6K
                        )}
                      >
                        {"Option"}
                      </div>
                    </Option>
                  </Select>
                </p.Stack>
              ) : null}

              <div
                data-plasmic-name={"leftRight"}
                data-plasmic-override={overrides.leftRight}
                className={classNames(projectcss.all, sty.leftRight)}
              >
                <div className={classNames(projectcss.all, sty.column__mcwbM)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"galleryItems"}
                    data-plasmic-override={overrides.galleryItems}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.galleryItems)}
                  >
                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__fuVxP
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox___9DTgU
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__cCmYs
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox___79VG6
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__uWnG
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__bwp4C
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__cg6Op
                      )}
                    />

                    <GalleryItemBox
                      className={classNames(
                        "__wab_instance",
                        sty.galleryItemBox__aKeLh
                      )}
                    />
                  </p.Stack>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.column___6Y2O)}
                  >
                    <div
                      data-plasmic-name={"rightSide"}
                      data-plasmic-override={overrides.rightSide}
                      className={classNames(projectcss.all, sty.rightSide)}
                    >
                      <div
                        data-plasmic-name={"imgDiv"}
                        data-plasmic-override={overrides.imgDiv}
                        className={classNames(projectcss.all, sty.imgDiv)}
                      >
                        <p.PlasmicImg
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/akyllers/images/humanMenEyesFacialMouth1Png.png",
                            fullWidth: 2048,
                            fullHeight: 2048,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        data-plasmic-name={"nameDiv"}
                        data-plasmic-override={overrides.nameDiv}
                        className={classNames(projectcss.all, sty.nameDiv)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wl51A
                          )}
                        >
                          {"Name"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uXqy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y5GuC
                            )}
                          >
                            {"#"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yKfyy
                            )}
                          >
                            {" "}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rO5HC
                            )}
                          >
                            {"1111"}
                          </div>
                        </div>
                      </div>

                      {true ? (
                        <div
                          data-plasmic-name={"attributesDiv"}
                          data-plasmic-override={overrides.attributesDiv}
                          className={classNames(
                            projectcss.all,
                            sty.attributesDiv
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"columns"}
                            data-plasmic-override={overrides.columns}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.columns)}
                          >
                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.column__nmSOy
                                )}
                              >
                                <AttributesBox
                                  className={classNames(
                                    "__wab_instance",
                                    sty.attributesBox__e30Hb
                                  )}
                                />
                              </div>
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__u62Kh
                              )}
                            >
                              <AttributesBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.attributesBox__gwgF
                                )}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__nUjhm
                              )}
                            >
                              <AttributesBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.attributesBox__qapmb
                                )}
                              />
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__qyx3D
                              )}
                            >
                              <AttributesBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.attributesBox__tnWmr
                                )}
                              />
                            </div>
                          </p.Stack>
                        </div>
                      ) : null}

                      <div
                        data-plasmic-name={"viewOn"}
                        data-plasmic-override={overrides.viewOn}
                        className={classNames(projectcss.all, sty.viewOn)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ivf3R
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1GnEl
                            )}
                          >
                            {"View on:"}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kIlxe
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rhzYa
                            )}
                          >
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__yMzqd
                              )}
                              role={"img"}
                            />

                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__fBteg
                              )}
                              role={"img"}
                            />
                          </p.Stack>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}

          <TrueFooter
            data-plasmic-name={"trueFooter"}
            data-plasmic-override={overrides.trueFooter}
            className={classNames("__wab_instance", sty.trueFooter)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarCustom",
    "boxesFooter",
    "textSection",
    "filters",
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "img",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn",
    "trueFooter"
  ],

  navbarCustom: ["navbarCustom"],
  boxesFooter: ["boxesFooter"],
  textSection: [
    "textSection",
    "filters",
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "img",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  filters: ["filters"],
  leftRight: [
    "leftRight",
    "galleryItems",
    "rightSide",
    "imgDiv",
    "img",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  galleryItems: ["galleryItems"],
  rightSide: [
    "rightSide",
    "imgDiv",
    "img",
    "nameDiv",
    "attributesDiv",
    "columns",
    "viewOn"
  ],

  imgDiv: ["imgDiv", "img"],
  img: ["img"],
  nameDiv: ["nameDiv"],
  attributesDiv: ["attributesDiv", "columns"],
  columns: ["columns"],
  viewOn: ["viewOn"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto5__ArgProps,
      internalVariantPropNames: PlasmicManifesto5__VariantProps
    });

    return PlasmicManifesto5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto5";
  } else {
    func.displayName = `PlasmicManifesto5.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto5 = Object.assign(
  // Top-level PlasmicManifesto5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarCustom: makeNodeComponent("navbarCustom"),
    boxesFooter: makeNodeComponent("boxesFooter"),
    textSection: makeNodeComponent("textSection"),
    filters: makeNodeComponent("filters"),
    leftRight: makeNodeComponent("leftRight"),
    galleryItems: makeNodeComponent("galleryItems"),
    rightSide: makeNodeComponent("rightSide"),
    imgDiv: makeNodeComponent("imgDiv"),
    img: makeNodeComponent("img"),
    nameDiv: makeNodeComponent("nameDiv"),
    attributesDiv: makeNodeComponent("attributesDiv"),
    columns: makeNodeComponent("columns"),
    viewOn: makeNodeComponent("viewOn"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto5
    internalVariantProps: PlasmicManifesto5__VariantProps,
    internalArgProps: PlasmicManifesto5__ArgProps
  }
);

export default PlasmicManifesto5;
/* prettier-ignore-end */
