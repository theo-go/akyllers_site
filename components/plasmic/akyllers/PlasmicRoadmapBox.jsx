// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: DlZHxOtpOm
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicRoadmapBox.module.css"; // plasmic-import: DlZHxOtpOm/css

export const PlasmicRoadmapBox__VariantProps = new Array();

export const PlasmicRoadmapBox__ArgProps = new Array(
  "image",
  "title",
  "slot",
  "slot2"
);

function PlasmicRoadmapBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: "/plasmic/akyllers/images/apng.png",
            fullWidth: 500,
            fullHeight: 500,
            aspectRatio: undefined
          }
        },

        props.args
      ),

    [props.args]
  );

  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"150px"}
        loading={"lazy"}
        src={args.image}
      />

      <div className={classNames(projectcss.all, sty.freeBox__rOg0N)}>
        {p.renderPlasmicSlot({
          defaultContents: "Our Vision & Values",
          value: args.title,
          className: classNames(sty.slotTargetTitle)
        })}
      </div>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__h1JY)}>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__zjk8Q)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "We are the Yuppies of the Metaverse. We’re riding on the thin line that separates the past from the future. We are a community of people who are bold yet kind, generous yet fair, Peaceful yet rebels, building what Woodstock was meant for.",
                value: args.slot
              })}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___6AIio)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fdssv
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"VISION:"}
                    </span>
                    <React.Fragment>
                      {
                        "\nA SIMPLE YET COMPLEX VISION DRIVES US – DISRUPT ENTREPRENEURSHIP BY CREATING THE LARGEST DECENTRALIZED BRAND FOR THE METAVERSE, BUILT AND OWNED BY THE COMMUNITY.\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"VALUES:"}
                    </span>
                    <React.Fragment>
                      {
                        "\nCOMMUNITY FIRST: BUILT BY AKYLLERS TO THE WORLD. #1 WILL ALWAYS BE AKYLLERS & #2 AKYLLERS & #3, WELL…. YOU KNOW.\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"TRUST THE PROCESS:"}
                    </span>
                    <React.Fragment>
                      {
                        "\nTIME WILL TELL WHAT WE ARE AIMING TO BUILD. IT IS AN EFFORT BY MANY TO THE BENEFIT OF ALL. DECENTRALIZED DOES NOT MEAN THERE IS NO LEADERSHIP, AND THE CORE TEAM WILL PROVIDE THE GUARD RAILS AND TOOLS FOR ALL SEEDS TO GROW TOGETHER.\n\n"
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"CREATIVE FIRST:"}
                    </span>
                    <React.Fragment>
                      {
                        "\nAKYLLERS IS CREATIVITY AND RELENTLESS PASSION. WE ARE TAKING A UNIQUE ROUTE, KNOWING THAT SOME WILL CRITICIZE AND MANY WILL NOT UNDERSTAND BEFORE IT BECOMES MAINSTREAM. BUT, WE ARE PAVING THE PATH."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              ),

              value: args.slot2
            })}
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRoadmapBox__ArgProps,
          internalVariantPropNames: PlasmicRoadmapBox__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicRoadmapBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoadmapBox";
  } else {
    func.displayName = `PlasmicRoadmapBox.${nodeName}`;
  }
  return func;
}

export const PlasmicRoadmapBox = Object.assign(
  // Top-level PlasmicRoadmapBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicRoadmapBox
    internalVariantProps: PlasmicRoadmapBox__VariantProps,
    internalArgProps: PlasmicRoadmapBox__ArgProps
  }
);

export default PlasmicRoadmapBox;
/* prettier-ignore-end */
