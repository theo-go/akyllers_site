// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: btXf6zq--J
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicAttributesBox.module.css"; // plasmic-import: btXf6zq--J/css

export const PlasmicAttributesBox__VariantProps = new Array();

export const PlasmicAttributesBox__ArgProps = new Array(
  "image",
  "type",
  "typeAnswer"
);

export const defaultAttributesBox__Args = {
  image: {
    src: "/plasmic/akyllers/images/untitledArtwork5Png.png",
    fullWidth: 500,
    fullHeight: 500,
    aspectRatio: undefined
  }
};

function PlasmicAttributesBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultAttributesBox__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__maxvn)}
      >
        <div
          data-plasmic-name={"iconDiv"}
          data-plasmic-override={overrides.iconDiv}
          className={classNames(projectcss.all, sty.iconDiv)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"24px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"24px"}
            loading={"lazy"}
            src={args.image}
          />
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__qNjHm)}>
          <div className={classNames(projectcss.all, sty.freeBox__dorQi)}>
            {p.renderPlasmicSlot({
              defaultContents: "Type:",
              value: args.type,
              className: classNames(sty.slotTargetType)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__nfseP)}>
            {p.renderPlasmicSlot({
              defaultContents: "HUMAN",
              value: args.typeAnswer,
              className: classNames(sty.slotTargetTypeAnswer)
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "iconDiv", "img"],
  iconDiv: ["iconDiv", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAttributesBox__ArgProps,
      internalVariantPropNames: PlasmicAttributesBox__VariantProps
    });

    return PlasmicAttributesBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAttributesBox";
  } else {
    func.displayName = `PlasmicAttributesBox.${nodeName}`;
  }
  return func;
}

export const PlasmicAttributesBox = Object.assign(
  // Top-level PlasmicAttributesBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconDiv: makeNodeComponent("iconDiv"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicAttributesBox
    internalVariantProps: PlasmicAttributesBox__VariantProps,
    internalArgProps: PlasmicAttributesBox__ArgProps
  }
);

export default PlasmicAttributesBox;
/* prettier-ignore-end */
