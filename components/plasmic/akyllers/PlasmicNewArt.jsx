// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: PrC51OjMk0
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicNewArt.module.css"; // plasmic-import: PrC51OjMk0/css

export const PlasmicNewArt__VariantProps = new Array();

export const PlasmicNewArt__ArgProps = new Array(
  "image",
  "title",
  "description",
  "url"
);

export const defaultNewArt__Args = {
  image: {
    src: "/plasmic/akyllers/images/_198XStory1Png2Jpeg.jpeg",
    fullWidth: 1400,
    fullHeight: 788,
    aspectRatio: undefined
  }
};

function PlasmicNewArt__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNewArt__Args, props.args);
  const $props = args;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
      component={Link}
      href={args.url}
      platform={"nextjs"}
      target={"_blank"}
    >
      <div className={classNames(projectcss.all, sty.freeBox___6TlcI)}>
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"250px"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={args.image}
        />

        <div className={classNames(projectcss.all, sty.freeBox__m0I6U)}>
          <div className={classNames(projectcss.all, sty.freeBox__ftcMo)}>
            {p.renderPlasmicSlot({
              defaultContents: "Title",
              value: args.title,
              className: classNames(sty.slotTargetTitle)
            })}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__iaD5T)}>
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.description,
              className: classNames(sty.slotTargetDescription)
            })}
          </div>
        </div>
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewArt__ArgProps,
      internalVariantPropNames: PlasmicNewArt__VariantProps
    });

    return PlasmicNewArt__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewArt";
  } else {
    func.displayName = `PlasmicNewArt.${nodeName}`;
  }
  return func;
}

export const PlasmicNewArt = Object.assign(
  // Top-level PlasmicNewArt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicNewArt
    internalVariantProps: PlasmicNewArt__VariantProps,
    internalArgProps: PlasmicNewArt__ArgProps
  }
);

export default PlasmicNewArt;
/* prettier-ignore-end */
