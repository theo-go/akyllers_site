// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: 9_TSPIaD38m
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import FullText from "../../FullText"; // plasmic-import: JxzItQHtdP/component
import RoadmapBox from "../../RoadmapBox"; // plasmic-import: DlZHxOtpOm/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto3.module.css"; // plasmic-import: 9_TSPIaD38m/css
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: DZ_ZJwIq1b/icon
import InstagramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom2Svg"; // plasmic-import: DNMeweYbp-/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: SCWRDWiaJn/icon

export const PlasmicManifesto3__VariantProps = new Array();

export const PlasmicManifesto3__ArgProps = new Array();

export const defaultManifesto3__Args = {};

function PlasmicManifesto3__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto3__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"asdf"}</title>
        <meta key="og:title" property="og:title" content={"asdf"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__wlwpM
                )}
                component={Link}
                href={"/"}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zjipH)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/akyllers/images/logopng.png",
                    fullWidth: 1560,
                    fullHeight: 303,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__a7ZG)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/ghostWhitepng.png",
                        fullWidth: 32,
                        fullHeight: 32,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/close.svg"
                }
              />
            }
            itemsGap={12}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qwJ4O
                  )}
                  component={Link}
                  href={"/manifesto-5"}
                  platform={"nextjs"}
                >
                  {"Gallery"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__s5LC7
                  )}
                  component={Link}
                  href={"/manifesto-3"}
                  platform={"nextjs"}
                >
                  {"Roadmap"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lxVcx
                  )}
                  component={Link}
                  href={"/manifesto"}
                  platform={"nextjs"}
                >
                  {"manifesto"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vgXzj
                  )}
                  component={Link}
                  href={"/-2"}
                  platform={"nextjs"}
                >
                  {"arcade"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__tlyIa
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <DiscordSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg___4YbdT)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__f0Zhb
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <InstagramSvgrepoCom2SvgIcon
                    className={classNames(projectcss.all, sty.svg__rQn5O)}
                    role={"img"}
                  />
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___8891
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <TwitterSvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__cpK9S)}
                    role={"img"}
                  />
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nJv2V)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "30px"
                    : "auto"
                }
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/akyllers/images/pacmanWhitepng.png",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }
                    : "https://static1.plasmic.app/menu.svg"
                }
              />
            }
            responsiveBreakpoint={768}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"descCol"}
              data-plasmic-override={overrides.descCol}
              className={classNames(projectcss.all, sty.descCol)}
            >
              <FullText
                data-plasmic-name={"fullText"}
                data-plasmic-override={overrides.fullText}
                className={classNames("__wab_instance", sty.fullText)}
                description={
                  "We are the Yuppies of the Metaverse. We’re riding on the thin line that separates the past from the future. We are a community of people who are bold yet kind, generous yet fair, Peaceful yet rebels, building what Woodstock was meant for.\n\nVISION:\nA SIMPLE YET COMPLEX VISION DRIVES US – DISRUPT ENTREPRENEURSHIP BY CREATING THE LARGEST DECENTRALIZED BRAND FOR THE METAVERSE, BUILT AND OWNED BY THE COMMUNITY.\n\nVALUES:\nCOMMUNITY FIRST: BUILT BY AKYLLERS TO THE WORLD. #1 WILL ALWAYS BE AKYLLERS & #2 AKYLLERS & #3, WELL…. YOU KNOW.\n\nTRUST THE PROCESS:\nTIME WILL TELL WHAT WE ARE AIMING TO BUILD. IT IS AN EFFORT BY MANY TO THE BENEFIT OF ALL. DECENTRALIZED DOES NOT MEAN THERE IS NO LEADERSHIP, AND THE CORE TEAM WILL PROVIDE THE GUARD RAILS AND TOOLS FOR ALL SEEDS TO GROW TOGETHER.\n\nCREATIVE FIRST:\nAKYLLERS IS CREATIVITY AND RELENTLESS PASSION. WE ARE TAKING A UNIQUE ROUTE, KNOWING THAT SOME WILL CRITICIZE AND MANY WILL NOT UNDERSTAND BEFORE IT BECOMES MAINSTREAM. BUT, WE ARE PAVING THE PATH."
                }
              />
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"boxes"}
              data-plasmic-override={overrides.boxes}
              hasGap={true}
              className={classNames(projectcss.all, sty.boxes)}
            >
              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox__llNuK)}
              />

              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox___531O)}
              />

              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox__ubHrQ)}
              />

              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox__tmjAy)}
              />

              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox__ug6E8)}
              />

              <RoadmapBox
                className={classNames("__wab_instance", sty.roadmapBox__tI7WU)}
              />
            </p.Stack>
          </p.Stack>

          <TrueFooter
            data-plasmic-name={"trueFooter"}
            data-plasmic-override={overrides.trueFooter}
            className={classNames("__wab_instance", sty.trueFooter)}
            darkMode={true}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "freeBox",
    "descCol",
    "fullText",
    "boxes",
    "trueFooter"
  ],

  navigationBar: ["navigationBar"],
  freeBox: ["freeBox", "descCol", "fullText", "boxes"],
  descCol: ["descCol", "fullText"],
  fullText: ["fullText"],
  boxes: ["boxes"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto3__ArgProps,
      internalVariantPropNames: PlasmicManifesto3__VariantProps
    });

    return PlasmicManifesto3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto3";
  } else {
    func.displayName = `PlasmicManifesto3.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto3 = Object.assign(
  // Top-level PlasmicManifesto3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    freeBox: makeNodeComponent("freeBox"),
    descCol: makeNodeComponent("descCol"),
    fullText: makeNodeComponent("fullText"),
    boxes: makeNodeComponent("boxes"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto3
    internalVariantProps: PlasmicManifesto3__VariantProps,
    internalArgProps: PlasmicManifesto3__ArgProps
  }
);

export default PlasmicManifesto3;
/* prettier-ignore-end */
