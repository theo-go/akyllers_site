// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: 9_TSPIaD38m
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import RoadmapItem from "../../RoadmapItem"; // plasmic-import: lEWLrQK3dc/component
import TrueFooter from "../../TrueFooter"; // plasmic-import: 1RTRAsLRW5N/component
import { useScreenVariants as useScreenVariantsnK2Y1P6I3Vepj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nK2Y1p6i3Vepj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicManifesto3.module.css"; // plasmic-import: 9_TSPIaD38m/css
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: DZ_ZJwIq1b/icon
import InstagramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom2Svg"; // plasmic-import: DNMeweYbp-/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: SCWRDWiaJn/icon

export const PlasmicManifesto3__VariantProps = new Array();

export const PlasmicManifesto3__ArgProps = new Array();

export const defaultManifesto3__Args = {};

function PlasmicManifesto3__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultManifesto3__Args, props.args);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnK2Y1P6I3Vepj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__lAcXy)}>
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fbB11
                  )}
                  component={Link}
                  href={"#"}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kiQka)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    src={{
                      src: "/plasmic/akyllers/images/logopng.png",
                      fullWidth: 1560,
                      fullHeight: 303,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__r0Z5W)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/akyllers/images/ghostWhitepng.png",
                          fullWidth: 32,
                          fullHeight: 32,
                          aspectRatio: undefined
                        }
                      : "https://static1.plasmic.app/close.svg"
                  }
                />
              }
              itemsGap={12}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__nfJx5
                    )}
                    component={Link}
                    href={"/manifesto-5"}
                    platform={"nextjs"}
                  >
                    {"Gallery"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__s5LC7
                    )}
                    component={Link}
                    href={"/manifesto-3"}
                    platform={"nextjs"}
                  >
                    {"Roadmap"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__lxVcx
                    )}
                    component={Link}
                    href={"/manifesto"}
                    platform={"nextjs"}
                  >
                    {"manifesto"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__vgXzj
                    )}
                    component={Link}
                    href={"/-2"}
                    platform={"nextjs"}
                  >
                    {"arcade"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__tlyIa
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <DiscordSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg___4YbdT)}
                      role={"img"}
                    />
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__f0Zhb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <InstagramSvgrepoCom2SvgIcon
                      className={classNames(projectcss.all, sty.svg__rQn5O)}
                      role={"img"}
                    />
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___8891
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <TwitterSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__cpK9S)}
                      role={"img"}
                    />
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dLOj9)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "auto"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "auto"
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/akyllers/images/pacmanWhitepng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined
                        }
                      : "https://static1.plasmic.app/menu.svg"
                  }
                />
              }
              responsiveBreakpoint={768}
            />

            <div
              data-plasmic-name={"textSection"}
              data-plasmic-override={overrides.textSection}
              className={classNames(projectcss.all, sty.textSection)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___2Pj0X
                )}
              >
                {"Roadmap"}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xTj3A
                )}
              >
                {"LAST REVIEWED ON THIS DATE"}
              </div>

              {true ? (
                <div
                  data-plasmic-name={"map"}
                  data-plasmic-override={overrides.map}
                  className={classNames(projectcss.all, sty.map)}
                >
                  <div
                    data-plasmic-name={"columns"}
                    data-plasmic-override={overrides.columns}
                    className={classNames(projectcss.all, sty.columns)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__qtY11)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem__mZq1
                        )}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__bkHfL)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem__vw4RD
                        )}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__zuj3Z)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem__bFiWx
                        )}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__hfYtT)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem__t4TV
                        )}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__daI9G)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem__byqD
                        )}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column___3Pzm4)}
                    >
                      <RoadmapItem
                        className={classNames(
                          "__wab_instance",
                          sty.roadmapItem___5Fjur
                        )}
                      />
                    </div>
                  </div>
                </div>
              ) : null}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__p9Kj)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"details"}
                data-plasmic-override={overrides.details}
                hasGap={true}
                className={classNames(projectcss.all, sty.details)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <div className={classNames(projectcss.all, sty.column__cYxP)}>
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__sqEeg
                      )}
                    >
                      {"01"}
                    </h1>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__mlKc3)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___31Vfj
                      )}
                    >
                      {"Roadmap"}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u66Dt
                      )}
                    >
                      {"LAST REVIEWED ON THIS DATE"}
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__qgJxW)}>
                <TrueFooter
                  data-plasmic-name={"trueFooter"}
                  data-plasmic-override={overrides.trueFooter}
                  className={classNames("__wab_instance", sty.trueFooter)}
                  darkMode={true}
                />
              </div>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "textSection",
    "map",
    "columns",
    "details",
    "_1",
    "trueFooter"
  ],

  navigationBar: ["navigationBar"],
  textSection: ["textSection", "map", "columns"],
  map: ["map", "columns"],
  columns: ["columns"],
  details: ["details", "_1"],
  _1: ["_1"],
  trueFooter: ["trueFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicManifesto3__ArgProps,
      internalVariantPropNames: PlasmicManifesto3__VariantProps
    });

    return PlasmicManifesto3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicManifesto3";
  } else {
    func.displayName = `PlasmicManifesto3.${nodeName}`;
  }
  return func;
}

export const PlasmicManifesto3 = Object.assign(
  // Top-level PlasmicManifesto3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    textSection: makeNodeComponent("textSection"),
    map: makeNodeComponent("map"),
    columns: makeNodeComponent("columns"),
    details: makeNodeComponent("details"),
    _1: makeNodeComponent("_1"),
    trueFooter: makeNodeComponent("trueFooter"),
    // Metadata about props expected for PlasmicManifesto3
    internalVariantProps: PlasmicManifesto3__VariantProps,
    internalArgProps: PlasmicManifesto3__ArgProps
  }
);

export default PlasmicManifesto3;
/* prettier-ignore-end */
