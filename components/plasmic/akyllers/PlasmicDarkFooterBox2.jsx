// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cELQgcBTCpXC8URn4hyouo
// Component: EaCaTvYvI9
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_akyllers.module.css"; // plasmic-import: cELQgcBTCpXC8URn4hyouo/projectcss
import sty from "./PlasmicDarkFooterBox2.module.css"; // plasmic-import: EaCaTvYvI9/css

export const PlasmicDarkFooterBox2__VariantProps = new Array();

export const PlasmicDarkFooterBox2__ArgProps = new Array();

export const defaultDarkFooterBox2__Args = {};

function PlasmicDarkFooterBox2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultDarkFooterBox2__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
      component={Link}
      href={"https://www.instagram.com/akyllers_/"}
      platform={"nextjs"}
      target={"_blank"}
    >
      <div
        data-plasmic-name={"darkFooterBox2"}
        data-plasmic-override={overrides.darkFooterBox2}
        className={classNames(projectcss.all, sty.darkFooterBox2)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"INSTAGRAM"}
        </div>
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "darkFooterBox2", "text"],
  darkFooterBox2: ["darkFooterBox2", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDarkFooterBox2__ArgProps,
      internalVariantPropNames: PlasmicDarkFooterBox2__VariantProps
    });

    return PlasmicDarkFooterBox2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDarkFooterBox2";
  } else {
    func.displayName = `PlasmicDarkFooterBox2.${nodeName}`;
  }
  return func;
}

export const PlasmicDarkFooterBox2 = Object.assign(
  // Top-level PlasmicDarkFooterBox2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    darkFooterBox2: makeNodeComponent("darkFooterBox2"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicDarkFooterBox2
    internalVariantProps: PlasmicDarkFooterBox2__VariantProps,
    internalArgProps: PlasmicDarkFooterBox2__ArgProps
  }
);

export default PlasmicDarkFooterBox2;
/* prettier-ignore-end */
